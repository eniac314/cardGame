var _user$project$View$centralPanelView = function (model) {
	return A2(
		_mdgriffith$stylish_elephants$Element$row,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element$width(
				_mdgriffith$stylish_elephants$Element$px((model.winSize.width / 2) | 0)),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$height(_mdgriffith$stylish_elephants$Element$fill),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$centerX,
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$spacing(100),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_mdgriffith$stylish_elephants$Element$el,
				{
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$width(
						_mdgriffith$stylish_elephants$Element$px(
							_elm_lang$core$Basics$round(model.cardWidth))),
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$height(
							_mdgriffith$stylish_elephants$Element$px(
								_elm_lang$core$Basics$round(model.cardHeight))),
						_1: {ctor: '[]'}
					}
				},
				_mdgriffith$stylish_elephants$Element$none),
			_1: {
				ctor: '::',
				_0: A2(
					_mdgriffith$stylish_elephants$Element$el,
					{
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$width(
							_mdgriffith$stylish_elephants$Element$px(
								_elm_lang$core$Basics$round(model.cardWidth))),
						_1: {
							ctor: '::',
							_0: _mdgriffith$stylish_elephants$Element$height(
								_mdgriffith$stylish_elephants$Element$px(
									_elm_lang$core$Basics$round(model.cardHeight))),
							_1: {ctor: '[]'}
						}
					},
					_mdgriffith$stylish_elephants$Element$none),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$View$r = 486 / 334;
var _user$project$View$cardView = F5(
	function (currentTick, _p1, orientation, nbrCards, _p0) {
		var _p2 = _p1;
		var _p7 = _p2._0;
		var _p6 = _p2._1;
		var _p3 = _p0;
		var _p5 = _p3.sprite;
		var transformOrigin = A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				(orientation * (100 + _elm_lang$core$Basics$round(_p7))) + ((_elm_lang$core$Basics$round(_p7) / 2) | 0)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'px ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						(orientation * -300) - ((_elm_lang$core$Basics$round(_p6) / 2) | 0)),
					'px')));
		var transform = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (anim, acc) {
					var _p4 = anim.property;
					switch (_p4.ctor) {
						case 'MoveX':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								acc,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'translateX(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_elm_lang$core$Basics$toFloat(orientation) * A2(_mgold$elm_animation$Animation$animate, currentTick, anim.animation)),
										'px) ')));
						case 'MoveY':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								acc,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'translateY(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_elm_lang$core$Basics$toFloat(orientation) * A2(_mgold$elm_animation$Animation$animate, currentTick, anim.animation)),
										'px) ')));
						default:
							return A2(
								_elm_lang$core$Basics_ops['++'],
								acc,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'rotateY(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											A2(_mgold$elm_animation$Animation$animate, currentTick, anim.animation)),
										'deg) ')));
					}
				}),
			'',
			_p3.animations);
		var yOffset = ((_elm_lang$core$Tuple$first(_p5) * -1) * _p7) * _user$project$View$r;
		var xOffset = (_elm_lang$core$Tuple$second(_p5) * -1) * _p7;
		var spritePos = _p3.isFlipped ? A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(-2 * _p7),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'px ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString((-4 * _p7) * _user$project$View$r),
					'px'))) : A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(xOffset),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'px ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(yOffset),
					'px')));
		return A2(
			_mdgriffith$stylish_elephants$Element$el,
			{
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$width(
					_mdgriffith$stylish_elephants$Element$px(
						_elm_lang$core$Basics$round(_p7))),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$height(
						_mdgriffith$stylish_elephants$Element$px(
							_elm_lang$core$Basics$round(_p6))),
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element_Border$width(1),
						_1: {
							ctor: '::',
							_0: _mdgriffith$stylish_elephants$Element_Border$rounded(5),
							_1: {
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Element$padding(5),
								_1: {
									ctor: '::',
									_0: _mdgriffith$stylish_elephants$Element_Events$onClick(
										_user$project$Types$Animate(_p3.id)),
									_1: {
										ctor: '::',
										_0: _mdgriffith$stylish_elephants$Element$htmlAttribute(
											_elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background-image', _1: 'url(\"/assets/playing cards Merge.jpg\")'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'background-position', _1: spritePos},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'background-size',
																_1: A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(_p7 * 13),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'px ',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(_p6 * 5),
																			'px')))
															},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'perspective', _1: '600px'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'transform-origin', _1: transformOrigin},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'transform', _1: transform},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												})),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			_mdgriffith$stylish_elephants$Element$none);
	});
var _user$project$View$handView = F5(
	function (tmp, currentTick, _p8, orientation, cards) {
		var _p9 = _p8;
		var _p10 = _p9._0;
		return A2(
			_mdgriffith$stylish_elephants$Element$row,
			{
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$spacing(
					_elm_lang$core$Basics$round(0 - _p10) + (2 * orientation)),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$width(_mdgriffith$stylish_elephants$Element$shrink),
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$centerX,
						_1: {
							ctor: '::',
							_0: _mdgriffith$stylish_elephants$Element$centerY,
							_1: {ctor: '[]'}
						}
					}
				}
			},
			A2(
				_elm_lang$core$List$map,
				A4(
					_user$project$View$cardView,
					currentTick,
					{ctor: '_Tuple2', _0: _p10, _1: _p9._1},
					orientation,
					_elm_lang$core$List$length(cards)),
				cards));
	});
var _user$project$View$opponentPanelView = function (model) {
	return A2(
		_mdgriffith$stylish_elephants$Element$row,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element$width(
				_mdgriffith$stylish_elephants$Element$px((model.winSize.width / 2) | 0)),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$height(_mdgriffith$stylish_elephants$Element$fill),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$centerX,
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$spacing(100),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_mdgriffith$stylish_elephants$Element$el,
				{
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$width(
						_mdgriffith$stylish_elephants$Element$px(
							_elm_lang$core$Basics$round(model.cardWidth))),
					_1: {ctor: '[]'}
				},
				_mdgriffith$stylish_elephants$Element$none),
			_1: {
				ctor: '::',
				_0: A5(
					_user$project$View$handView,
					model.tmp,
					model.currentTick,
					{ctor: '_Tuple2', _0: model.cardWidth, _1: model.cardHeight},
					-1,
					model.opponentDeck),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$View$playerPanelView = function (model) {
	return A2(
		_mdgriffith$stylish_elephants$Element$row,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element$width(
				_mdgriffith$stylish_elephants$Element$px((model.winSize.width / 2) | 0)),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$height(_mdgriffith$stylish_elephants$Element$fill),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$centerX,
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$spacing(100),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: A5(
				_user$project$View$handView,
				model.tmp,
				model.currentTick,
				{ctor: '_Tuple2', _0: model.cardWidth, _1: model.cardHeight},
				1,
				model.playerDeck),
			_1: {
				ctor: '::',
				_0: A2(
					_mdgriffith$stylish_elephants$Element$el,
					{
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$width(
							_mdgriffith$stylish_elephants$Element$px(
								_elm_lang$core$Basics$round(model.cardWidth))),
						_1: {ctor: '[]'}
					},
					_mdgriffith$stylish_elephants$Element$none),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$View$view = function (model) {
	return A2(
		_mdgriffith$stylish_elephants$Element$layout,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element_Background$tiled('/assets/bg.gif'),
			_1: {ctor: '[]'}
		},
		A2(
			_mdgriffith$stylish_elephants$Element$column,
			{
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$width(_mdgriffith$stylish_elephants$Element$fill),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$height(_mdgriffith$stylish_elephants$Element$fill),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$View$opponentPanelView(model),
				_1: {
					ctor: '::',
					_0: _user$project$View$centralPanelView(model),
					_1: {
						ctor: '::',
						_0: _user$project$View$playerPanelView(model),
						_1: {ctor: '[]'}
					}
				}
			}));
};
